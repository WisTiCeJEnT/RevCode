{"ast":null,"code":"import * as React from 'react';\n\nvar isActionSupported = function isActionSupported(targetRef, method) {\n  return targetRef && !!targetRef.current && !!targetRef.current[method];\n};\n\nvar useEventListener = function useEventListener(options) {\n  var capture = options.capture,\n      listener = options.listener,\n      type = options.type,\n      targetRef = options.targetRef;\n  var latestListener = React.useRef(listener);\n  latestListener.current = listener;\n  var eventHandler = React.useCallback(function (event) {\n    return latestListener.current(event);\n  }, []);\n  React.useEffect(function () {\n    if (isActionSupported(targetRef, 'addEventListener')) {\n      ;\n      targetRef.current.addEventListener(type, eventHandler, capture);\n    } else if (process.env.NODE_ENV !== 'production') {\n      throw new Error('@stardust-ui/react-component-event-listener: Passed `targetRef` is not valid or does not support `addEventListener()` method.');\n    }\n\n    return function () {\n      if (isActionSupported(targetRef, 'removeEventListener')) {\n        ;\n        targetRef.current.removeEventListener(type, eventHandler, capture);\n      } else if (process.env.NODE_ENV !== 'production') {\n        throw new Error('@stardust-ui/react-component-event-listener: Passed `targetRef` is not valid or does not support `removeEventListener()` method.');\n      }\n    };\n  }, [capture, targetRef, type]);\n};\n\nexport default useEventListener;","map":null,"metadata":{},"sourceType":"module"}