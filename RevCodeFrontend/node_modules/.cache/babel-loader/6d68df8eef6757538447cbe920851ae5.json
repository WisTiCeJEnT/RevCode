{"ast":null,"code":"var _jsxFileName = \"/Users/finality5/Desktop/speechreg/src/Speech.js\";\nimport React, { Component } from \"react\";\nimport { Button, Message } from \"semantic-ui-react\";\nwindow.SpeechRecognition = window.webkitSpeechRecognition || window.SpeechRecognition;\nlet finalTranscript = \"\";\nlet recognition = new window.SpeechRecognition();\nrecognition.interimResults = true;\nrecognition.maxAlternatives = 10;\nrecognition.continuous = true;\nexport class Speech extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      unpressed: true,\n      res: \"\"\n    };\n\n    this.btnPressed = () => {\n      this.setState({\n        unpressed: !this.state.unpressed\n      });\n\n      recognition.onresult = event => {\n        let interimTranscript = \"\";\n\n        for (let i = event.resultIndex, len = event.results.length; i < len; i++) {\n          let transcript = event.results[i][0].transcript;\n\n          if (event.results[i].isFinal) {\n            finalTranscript += transcript;\n          } else {\n            interimTranscript += transcript;\n          }\n        }\n\n        this.setState({\n          res: finalTranscript + interimTranscript\n        });\n      };\n\n      recognition.start();\n    };\n  }\n\n  render() {\n    console.log(this.state.res);\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36\n      },\n      __self: this\n    }, React.createElement(Button, {\n      content: this.state.unpressed ? \"Start Record\" : \"Recording\",\n      icon: \"microphone\",\n      color: this.state.unpressed ? \"teal\" : \"red\",\n      labelPosition: \"left\",\n      onClick: this.btnPressed,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37\n      },\n      __self: this\n    }), React.createElement(Message, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44\n      },\n      __self: this\n    }, React.createElement(Message.Header, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45\n      },\n      __self: this\n    }, \"Result\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46\n      },\n      __self: this\n    }, this.state.res)));\n  }\n\n}\nexport default Speech;","map":{"version":3,"sources":["/Users/finality5/Desktop/speechreg/src/Speech.js"],"names":["React","Component","Button","Message","window","SpeechRecognition","webkitSpeechRecognition","finalTranscript","recognition","interimResults","maxAlternatives","continuous","Speech","state","unpressed","res","btnPressed","setState","onresult","event","interimTranscript","i","resultIndex","len","results","length","transcript","isFinal","start","render","console","log"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,MAAT,EAAiBC,OAAjB,QAAgC,mBAAhC;AAEAC,MAAM,CAACC,iBAAP,GACED,MAAM,CAACE,uBAAP,IAAkCF,MAAM,CAACC,iBAD3C;AAEA,IAAIE,eAAe,GAAG,EAAtB;AACA,IAAIC,WAAW,GAAG,IAAIJ,MAAM,CAACC,iBAAX,EAAlB;AACAG,WAAW,CAACC,cAAZ,GAA6B,IAA7B;AACAD,WAAW,CAACE,eAAZ,GAA8B,EAA9B;AACAF,WAAW,CAACG,UAAZ,GAAyB,IAAzB;AACA,OAAO,MAAMC,MAAN,SAAqBX,SAArB,CAA+B;AAAA;AAAA;AAAA,SACpCY,KADoC,GAC5B;AAAEC,MAAAA,SAAS,EAAE,IAAb;AAAmBC,MAAAA,GAAG,EAAE;AAAxB,KAD4B;;AAAA,SAEpCC,UAFoC,GAEvB,MAAM;AACjB,WAAKC,QAAL,CAAc;AAAEH,QAAAA,SAAS,EAAE,CAAC,KAAKD,KAAL,CAAWC;AAAzB,OAAd;;AACAN,MAAAA,WAAW,CAACU,QAAZ,GAAuBC,KAAK,IAAI;AAC9B,YAAIC,iBAAiB,GAAG,EAAxB;;AACA,aACE,IAAIC,CAAC,GAAGF,KAAK,CAACG,WAAd,EAA2BC,GAAG,GAAGJ,KAAK,CAACK,OAAN,CAAcC,MADjD,EAEEJ,CAAC,GAAGE,GAFN,EAGEF,CAAC,EAHH,EAIE;AACA,cAAIK,UAAU,GAAGP,KAAK,CAACK,OAAN,CAAcH,CAAd,EAAiB,CAAjB,EAAoBK,UAArC;;AACA,cAAIP,KAAK,CAACK,OAAN,CAAcH,CAAd,EAAiBM,OAArB,EAA8B;AAC5BpB,YAAAA,eAAe,IAAImB,UAAnB;AACD,WAFD,MAEO;AACLN,YAAAA,iBAAiB,IAAIM,UAArB;AACD;AACF;;AACD,aAAKT,QAAL,CAAc;AAAEF,UAAAA,GAAG,EAAER,eAAe,GAAGa;AAAzB,SAAd;AACD,OAfD;;AAgBAZ,MAAAA,WAAW,CAACoB,KAAZ;AACD,KArBmC;AAAA;;AAsBpCC,EAAAA,MAAM,GAAG;AACPC,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKlB,KAAL,CAAWE,GAAvB;AACA,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,MAAD;AACE,MAAA,OAAO,EAAE,KAAKF,KAAL,CAAWC,SAAX,GAAuB,cAAvB,GAAwC,WADnD;AAEE,MAAA,IAAI,EAAC,YAFP;AAGE,MAAA,KAAK,EAAE,KAAKD,KAAL,CAAWC,SAAX,GAAuB,MAAvB,GAAgC,KAHzC;AAIE,MAAA,aAAa,EAAC,MAJhB;AAKE,MAAA,OAAO,EAAE,KAAKE,UALhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAQE,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,OAAD,CAAS,MAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAI,KAAKH,KAAL,CAAWE,GAAf,CAFF,CARF,CADF;AAeD;;AAvCmC;AA0CtC,eAAeH,MAAf","sourcesContent":["import React, { Component } from \"react\";\nimport { Button, Message } from \"semantic-ui-react\";\n\nwindow.SpeechRecognition =\n  window.webkitSpeechRecognition || window.SpeechRecognition;\nlet finalTranscript = \"\";\nlet recognition = new window.SpeechRecognition();\nrecognition.interimResults = true;\nrecognition.maxAlternatives = 10;\nrecognition.continuous = true;\nexport class Speech extends Component {\n  state = { unpressed: true, res: \"\" };\n  btnPressed = () => {\n    this.setState({ unpressed: !this.state.unpressed });\n    recognition.onresult = event => {\n      let interimTranscript = \"\";\n      for (\n        let i = event.resultIndex, len = event.results.length;\n        i < len;\n        i++\n      ) {\n        let transcript = event.results[i][0].transcript;\n        if (event.results[i].isFinal) {\n          finalTranscript += transcript;\n        } else {\n          interimTranscript += transcript;\n        }\n      }\n      this.setState({ res: finalTranscript + interimTranscript });\n    };\n    recognition.start();\n  };\n  render() {\n    console.log(this.state.res);\n    return (\n      <div>\n        <Button\n          content={this.state.unpressed ? \"Start Record\" : \"Recording\"}\n          icon=\"microphone\"\n          color={this.state.unpressed ? \"teal\" : \"red\"}\n          labelPosition=\"left\"\n          onClick={this.btnPressed}\n        />\n        <Message>\n          <Message.Header>Result</Message.Header>\n          <p>{this.state.res}</p>\n        </Message>\n      </div>\n    );\n  }\n}\n\nexport default Speech;\n"]},"metadata":{},"sourceType":"module"}