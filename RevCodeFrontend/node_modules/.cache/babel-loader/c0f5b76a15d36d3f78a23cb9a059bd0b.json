{"ast":null,"code":"// Generated by CoffeeScript 1.10.0\nvar DATE_MAX_YEAR, DATE_MIN_YEAR, DATE_SPLITS, GRAPHS, L33T_TABLE, RANKED_DICTIONARIES, REGEXEN, adjacency_graphs, build_ranked_dict, frequency_lists, lst, matching, name, scoring;\nfrequency_lists = require('./frequency_lists');\nadjacency_graphs = require('./adjacency_graphs');\nscoring = require('./scoring');\n\nbuild_ranked_dict = function (ordered_list) {\n  var i, len1, o, result, word;\n  result = {};\n  i = 1;\n\n  for (o = 0, len1 = ordered_list.length; o < len1; o++) {\n    word = ordered_list[o];\n    result[word] = i;\n    i += 1;\n  }\n\n  return result;\n};\n\nRANKED_DICTIONARIES = {};\n\nfor (name in frequency_lists) {\n  lst = frequency_lists[name];\n  RANKED_DICTIONARIES[name] = build_ranked_dict(lst);\n}\n\nGRAPHS = {\n  qwerty: adjacency_graphs.qwerty,\n  dvorak: adjacency_graphs.dvorak,\n  keypad: adjacency_graphs.keypad,\n  mac_keypad: adjacency_graphs.mac_keypad\n};\nL33T_TABLE = {\n  a: ['4', '@'],\n  b: ['8'],\n  c: ['(', '{', '[', '<'],\n  e: ['3'],\n  g: ['6', '9'],\n  i: ['1', '!', '|'],\n  l: ['1', '|', '7'],\n  o: ['0'],\n  s: ['$', '5'],\n  t: ['+', '7'],\n  x: ['%'],\n  z: ['2']\n};\nREGEXEN = {\n  recent_year: /19\\d\\d|200\\d|201\\d/g\n};\nDATE_MAX_YEAR = 2050;\nDATE_MIN_YEAR = 1000;\nDATE_SPLITS = {\n  4: [[1, 2], [2, 3]],\n  5: [[1, 3], [2, 3]],\n  6: [[1, 2], [2, 4], [4, 5]],\n  7: [[1, 3], [2, 3], [4, 5], [4, 6]],\n  8: [[2, 4], [4, 6]]\n};\nmatching = {\n  empty: function (obj) {\n    var k;\n    return function () {\n      var results;\n      results = [];\n\n      for (k in obj) {\n        results.push(k);\n      }\n\n      return results;\n    }().length === 0;\n  },\n  extend: function (lst, lst2) {\n    return lst.push.apply(lst, lst2);\n  },\n  translate: function (string, chr_map) {\n    var chr;\n    return function () {\n      var len1, o, ref, results;\n      ref = string.split('');\n      results = [];\n\n      for (o = 0, len1 = ref.length; o < len1; o++) {\n        chr = ref[o];\n        results.push(chr_map[chr] || chr);\n      }\n\n      return results;\n    }().join('');\n  },\n  mod: function (n, m) {\n    return (n % m + m) % m;\n  },\n  sorted: function (matches) {\n    return matches.sort(function (m1, m2) {\n      return m1.i - m2.i || m1.j - m2.j;\n    });\n  },\n  omnimatch: function (password) {\n    var len1, matcher, matchers, matches, o;\n    matches = [];\n    matchers = [this.dictionary_match, this.reverse_dictionary_match, this.l33t_match, this.spatial_match, this.repeat_match, this.sequence_match, this.regex_match, this.date_match];\n\n    for (o = 0, len1 = matchers.length; o < len1; o++) {\n      matcher = matchers[o];\n      this.extend(matches, matcher.call(this, password));\n    }\n\n    return this.sorted(matches);\n  },\n  dictionary_match: function (password, _ranked_dictionaries) {\n    var dictionary_name, i, j, len, matches, o, p, password_lower, rank, ranked_dict, ref, ref1, ref2, word;\n\n    if (_ranked_dictionaries == null) {\n      _ranked_dictionaries = RANKED_DICTIONARIES;\n    }\n\n    matches = [];\n    len = password.length;\n    password_lower = password.toLowerCase();\n\n    for (dictionary_name in _ranked_dictionaries) {\n      ranked_dict = _ranked_dictionaries[dictionary_name];\n\n      for (i = o = 0, ref = len; 0 <= ref ? o < ref : o > ref; i = 0 <= ref ? ++o : --o) {\n        for (j = p = ref1 = i, ref2 = len; ref1 <= ref2 ? p < ref2 : p > ref2; j = ref1 <= ref2 ? ++p : --p) {\n          if (password_lower.slice(i, +j + 1 || 9e9) in ranked_dict) {\n            word = password_lower.slice(i, +j + 1 || 9e9);\n            rank = ranked_dict[word];\n            matches.push({\n              pattern: 'dictionary',\n              i: i,\n              j: j,\n              token: password.slice(i, +j + 1 || 9e9),\n              matched_word: word,\n              rank: rank,\n              dictionary_name: dictionary_name,\n              reversed: false,\n              l33t: false\n            });\n          }\n        }\n      }\n    }\n\n    return this.sorted(matches);\n  },\n  reverse_dictionary_match: function (password, _ranked_dictionaries) {\n    var len1, match, matches, o, ref, reversed_password;\n\n    if (_ranked_dictionaries == null) {\n      _ranked_dictionaries = RANKED_DICTIONARIES;\n    }\n\n    reversed_password = password.split('').reverse().join('');\n    matches = this.dictionary_match(reversed_password, _ranked_dictionaries);\n\n    for (o = 0, len1 = matches.length; o < len1; o++) {\n      match = matches[o];\n      match.token = match.token.split('').reverse().join('');\n      match.reversed = true;\n      ref = [password.length - 1 - match.j, password.length - 1 - match.i], match.i = ref[0], match.j = ref[1];\n    }\n\n    return this.sorted(matches);\n  },\n  set_user_input_dictionary: function (ordered_list) {\n    return RANKED_DICTIONARIES['user_inputs'] = build_ranked_dict(ordered_list.slice());\n  },\n  relevant_l33t_subtable: function (password, table) {\n    var chr, len1, letter, o, password_chars, ref, relevant_subs, sub, subs, subtable;\n    password_chars = {};\n    ref = password.split('');\n\n    for (o = 0, len1 = ref.length; o < len1; o++) {\n      chr = ref[o];\n      password_chars[chr] = true;\n    }\n\n    subtable = {};\n\n    for (letter in table) {\n      subs = table[letter];\n\n      relevant_subs = function () {\n        var len2, p, results;\n        results = [];\n\n        for (p = 0, len2 = subs.length; p < len2; p++) {\n          sub = subs[p];\n\n          if (sub in password_chars) {\n            results.push(sub);\n          }\n        }\n\n        return results;\n      }();\n\n      if (relevant_subs.length > 0) {\n        subtable[letter] = relevant_subs;\n      }\n    }\n\n    return subtable;\n  },\n  enumerate_l33t_subs: function (table) {\n    var chr, dedup, helper, k, keys, l33t_chr, len1, len2, o, p, ref, sub, sub_dict, sub_dicts, subs;\n\n    keys = function () {\n      var results;\n      results = [];\n\n      for (k in table) {\n        results.push(k);\n      }\n\n      return results;\n    }();\n\n    subs = [[]];\n\n    dedup = function (subs) {\n      var assoc, deduped, label, len1, members, o, sub, v;\n      deduped = [];\n      members = {};\n\n      for (o = 0, len1 = subs.length; o < len1; o++) {\n        sub = subs[o];\n\n        assoc = function () {\n          var len2, p, results;\n          results = [];\n\n          for (v = p = 0, len2 = sub.length; p < len2; v = ++p) {\n            k = sub[v];\n            results.push([k, v]);\n          }\n\n          return results;\n        }();\n\n        assoc.sort();\n\n        label = function () {\n          var len2, p, results;\n          results = [];\n\n          for (v = p = 0, len2 = assoc.length; p < len2; v = ++p) {\n            k = assoc[v];\n            results.push(k + ',' + v);\n          }\n\n          return results;\n        }().join('-');\n\n        if (!(label in members)) {\n          members[label] = true;\n          deduped.push(sub);\n        }\n      }\n\n      return deduped;\n    };\n\n    helper = function (keys) {\n      var dup_l33t_index, first_key, i, l33t_chr, len1, len2, next_subs, o, p, q, ref, ref1, rest_keys, sub, sub_alternative, sub_extension;\n\n      if (!keys.length) {\n        return;\n      }\n\n      first_key = keys[0];\n      rest_keys = keys.slice(1);\n      next_subs = [];\n      ref = table[first_key];\n\n      for (o = 0, len1 = ref.length; o < len1; o++) {\n        l33t_chr = ref[o];\n\n        for (p = 0, len2 = subs.length; p < len2; p++) {\n          sub = subs[p];\n          dup_l33t_index = -1;\n\n          for (i = q = 0, ref1 = sub.length; 0 <= ref1 ? q < ref1 : q > ref1; i = 0 <= ref1 ? ++q : --q) {\n            if (sub[i][0] === l33t_chr) {\n              dup_l33t_index = i;\n              break;\n            }\n          }\n\n          if (dup_l33t_index === -1) {\n            sub_extension = sub.concat([[l33t_chr, first_key]]);\n            next_subs.push(sub_extension);\n          } else {\n            sub_alternative = sub.slice(0);\n            sub_alternative.splice(dup_l33t_index, 1);\n            sub_alternative.push([l33t_chr, first_key]);\n            next_subs.push(sub);\n            next_subs.push(sub_alternative);\n          }\n        }\n      }\n\n      subs = dedup(next_subs);\n      return helper(rest_keys);\n    };\n\n    helper(keys);\n    sub_dicts = [];\n\n    for (o = 0, len1 = subs.length; o < len1; o++) {\n      sub = subs[o];\n      sub_dict = {};\n\n      for (p = 0, len2 = sub.length; p < len2; p++) {\n        ref = sub[p], l33t_chr = ref[0], chr = ref[1];\n        sub_dict[l33t_chr] = chr;\n      }\n\n      sub_dicts.push(sub_dict);\n    }\n\n    return sub_dicts;\n  },\n  l33t_match: function (password, _ranked_dictionaries, _l33t_table) {\n    var chr, k, len1, len2, match, match_sub, matches, o, p, ref, ref1, sub, subbed_chr, subbed_password, token, v;\n\n    if (_ranked_dictionaries == null) {\n      _ranked_dictionaries = RANKED_DICTIONARIES;\n    }\n\n    if (_l33t_table == null) {\n      _l33t_table = L33T_TABLE;\n    }\n\n    matches = [];\n    ref = this.enumerate_l33t_subs(this.relevant_l33t_subtable(password, _l33t_table));\n\n    for (o = 0, len1 = ref.length; o < len1; o++) {\n      sub = ref[o];\n\n      if (this.empty(sub)) {\n        break;\n      }\n\n      subbed_password = this.translate(password, sub);\n      ref1 = this.dictionary_match(subbed_password, _ranked_dictionaries);\n\n      for (p = 0, len2 = ref1.length; p < len2; p++) {\n        match = ref1[p];\n        token = password.slice(match.i, +match.j + 1 || 9e9);\n\n        if (token.toLowerCase() === match.matched_word) {\n          continue;\n        }\n\n        match_sub = {};\n\n        for (subbed_chr in sub) {\n          chr = sub[subbed_chr];\n\n          if (token.indexOf(subbed_chr) !== -1) {\n            match_sub[subbed_chr] = chr;\n          }\n        }\n\n        match.l33t = true;\n        match.token = token;\n        match.sub = match_sub;\n\n        match.sub_display = function () {\n          var results;\n          results = [];\n\n          for (k in match_sub) {\n            v = match_sub[k];\n            results.push(k + \" -> \" + v);\n          }\n\n          return results;\n        }().join(', ');\n\n        matches.push(match);\n      }\n    }\n\n    return this.sorted(matches.filter(function (match) {\n      return match.token.length > 1;\n    }));\n  },\n  spatial_match: function (password, _graphs) {\n    var graph, graph_name, matches;\n\n    if (_graphs == null) {\n      _graphs = GRAPHS;\n    }\n\n    matches = [];\n\n    for (graph_name in _graphs) {\n      graph = _graphs[graph_name];\n      this.extend(matches, this.spatial_match_helper(password, graph, graph_name));\n    }\n\n    return this.sorted(matches);\n  },\n  SHIFTED_RX: /[~!@#$%^&*()_+QWERTYUIOP{}|ASDFGHJKL:\"ZXCVBNM<>?]/,\n  spatial_match_helper: function (password, graph, graph_name) {\n    var adj, adjacents, cur_char, cur_direction, found, found_direction, i, j, last_direction, len1, matches, o, prev_char, shifted_count, turns;\n    matches = [];\n    i = 0;\n\n    while (i < password.length - 1) {\n      j = i + 1;\n      last_direction = null;\n      turns = 0;\n\n      if ((graph_name === 'qwerty' || graph_name === 'dvorak') && this.SHIFTED_RX.exec(password.charAt(i))) {\n        shifted_count = 1;\n      } else {\n        shifted_count = 0;\n      }\n\n      while (true) {\n        prev_char = password.charAt(j - 1);\n        found = false;\n        found_direction = -1;\n        cur_direction = -1;\n        adjacents = graph[prev_char] || [];\n\n        if (j < password.length) {\n          cur_char = password.charAt(j);\n\n          for (o = 0, len1 = adjacents.length; o < len1; o++) {\n            adj = adjacents[o];\n            cur_direction += 1;\n\n            if (adj && adj.indexOf(cur_char) !== -1) {\n              found = true;\n              found_direction = cur_direction;\n\n              if (adj.indexOf(cur_char) === 1) {\n                shifted_count += 1;\n              }\n\n              if (last_direction !== found_direction) {\n                turns += 1;\n                last_direction = found_direction;\n              }\n\n              break;\n            }\n          }\n        }\n\n        if (found) {\n          j += 1;\n        } else {\n          if (j - i > 2) {\n            matches.push({\n              pattern: 'spatial',\n              i: i,\n              j: j - 1,\n              token: password.slice(i, j),\n              graph: graph_name,\n              turns: turns,\n              shifted_count: shifted_count\n            });\n          }\n\n          i = j;\n          break;\n        }\n      }\n    }\n\n    return matches;\n  },\n  repeat_match: function (password) {\n    var base_analysis, base_guesses, base_matches, base_token, greedy, greedy_match, i, j, lastIndex, lazy, lazy_anchored, lazy_match, match, matches, ref;\n    matches = [];\n    greedy = /(.+)\\1+/g;\n    lazy = /(.+?)\\1+/g;\n    lazy_anchored = /^(.+?)\\1+$/;\n    lastIndex = 0;\n\n    while (lastIndex < password.length) {\n      greedy.lastIndex = lazy.lastIndex = lastIndex;\n      greedy_match = greedy.exec(password);\n      lazy_match = lazy.exec(password);\n\n      if (greedy_match == null) {\n        break;\n      }\n\n      if (greedy_match[0].length > lazy_match[0].length) {\n        match = greedy_match;\n        base_token = lazy_anchored.exec(match[0])[1];\n      } else {\n        match = lazy_match;\n        base_token = match[1];\n      }\n\n      ref = [match.index, match.index + match[0].length - 1], i = ref[0], j = ref[1];\n      base_analysis = scoring.most_guessable_match_sequence(base_token, this.omnimatch(base_token));\n      base_matches = base_analysis.sequence;\n      base_guesses = base_analysis.guesses;\n      matches.push({\n        pattern: 'repeat',\n        i: i,\n        j: j,\n        token: match[0],\n        base_token: base_token,\n        base_guesses: base_guesses,\n        base_matches: base_matches,\n        repeat_count: match[0].length / base_token.length\n      });\n      lastIndex = j + 1;\n    }\n\n    return matches;\n  },\n  MAX_DELTA: 5,\n  sequence_match: function (password) {\n    var delta, i, j, k, last_delta, o, ref, result, update;\n\n    if (password.length === 1) {\n      return [];\n    }\n\n    update = function (_this) {\n      return function (i, j, delta) {\n        var ref, sequence_name, sequence_space, token;\n\n        if (j - i > 1 || Math.abs(delta) === 1) {\n          if (0 < (ref = Math.abs(delta)) && ref <= _this.MAX_DELTA) {\n            token = password.slice(i, +j + 1 || 9e9);\n\n            if (/^[a-z]+$/.test(token)) {\n              sequence_name = 'lower';\n              sequence_space = 26;\n            } else if (/^[A-Z]+$/.test(token)) {\n              sequence_name = 'upper';\n              sequence_space = 26;\n            } else if (/^\\d+$/.test(token)) {\n              sequence_name = 'digits';\n              sequence_space = 10;\n            } else {\n              sequence_name = 'unicode';\n              sequence_space = 26;\n            }\n\n            return result.push({\n              pattern: 'sequence',\n              i: i,\n              j: j,\n              token: password.slice(i, +j + 1 || 9e9),\n              sequence_name: sequence_name,\n              sequence_space: sequence_space,\n              ascending: delta > 0\n            });\n          }\n        }\n      };\n    }(this);\n\n    result = [];\n    i = 0;\n    last_delta = null;\n\n    for (k = o = 1, ref = password.length; 1 <= ref ? o < ref : o > ref; k = 1 <= ref ? ++o : --o) {\n      delta = password.charCodeAt(k) - password.charCodeAt(k - 1);\n\n      if (last_delta == null) {\n        last_delta = delta;\n      }\n\n      if (delta === last_delta) {\n        continue;\n      }\n\n      j = k - 1;\n      update(i, j, last_delta);\n      i = j;\n      last_delta = delta;\n    }\n\n    update(i, password.length - 1, last_delta);\n    return result;\n  },\n  regex_match: function (password, _regexen) {\n    var matches, regex, rx_match, token;\n\n    if (_regexen == null) {\n      _regexen = REGEXEN;\n    }\n\n    matches = [];\n\n    for (name in _regexen) {\n      regex = _regexen[name];\n      regex.lastIndex = 0;\n\n      while (rx_match = regex.exec(password)) {\n        token = rx_match[0];\n        matches.push({\n          pattern: 'regex',\n          token: token,\n          i: rx_match.index,\n          j: rx_match.index + rx_match[0].length - 1,\n          regex_name: name,\n          regex_match: rx_match\n        });\n      }\n    }\n\n    return this.sorted(matches);\n  },\n  date_match: function (password) {\n    var best_candidate, candidate, candidates, distance, dmy, i, j, k, l, len1, len2, matches, maybe_date_no_separator, maybe_date_with_separator, metric, min_distance, o, p, q, r, ref, ref1, ref2, ref3, ref4, ref5, ref6, ref7, ref8, ref9, rx_match, s, t, token;\n    matches = [];\n    maybe_date_no_separator = /^\\d{4,8}$/;\n    maybe_date_with_separator = /^(\\d{1,4})([\\s\\/\\\\_.-])(\\d{1,2})\\2(\\d{1,4})$/;\n\n    for (i = o = 0, ref = password.length - 4; 0 <= ref ? o <= ref : o >= ref; i = 0 <= ref ? ++o : --o) {\n      for (j = p = ref1 = i + 3, ref2 = i + 7; ref1 <= ref2 ? p <= ref2 : p >= ref2; j = ref1 <= ref2 ? ++p : --p) {\n        if (j >= password.length) {\n          break;\n        }\n\n        token = password.slice(i, +j + 1 || 9e9);\n\n        if (!maybe_date_no_separator.exec(token)) {\n          continue;\n        }\n\n        candidates = [];\n        ref3 = DATE_SPLITS[token.length];\n\n        for (q = 0, len1 = ref3.length; q < len1; q++) {\n          ref4 = ref3[q], k = ref4[0], l = ref4[1];\n          dmy = this.map_ints_to_dmy([parseInt(token.slice(0, k)), parseInt(token.slice(k, l)), parseInt(token.slice(l))]);\n\n          if (dmy != null) {\n            candidates.push(dmy);\n          }\n        }\n\n        if (!(candidates.length > 0)) {\n          continue;\n        }\n\n        best_candidate = candidates[0];\n\n        metric = function (candidate) {\n          return Math.abs(candidate.year - scoring.REFERENCE_YEAR);\n        };\n\n        min_distance = metric(candidates[0]);\n        ref5 = candidates.slice(1);\n\n        for (r = 0, len2 = ref5.length; r < len2; r++) {\n          candidate = ref5[r];\n          distance = metric(candidate);\n\n          if (distance < min_distance) {\n            ref6 = [candidate, distance], best_candidate = ref6[0], min_distance = ref6[1];\n          }\n        }\n\n        matches.push({\n          pattern: 'date',\n          token: token,\n          i: i,\n          j: j,\n          separator: '',\n          year: best_candidate.year,\n          month: best_candidate.month,\n          day: best_candidate.day\n        });\n      }\n    }\n\n    for (i = s = 0, ref7 = password.length - 6; 0 <= ref7 ? s <= ref7 : s >= ref7; i = 0 <= ref7 ? ++s : --s) {\n      for (j = t = ref8 = i + 5, ref9 = i + 9; ref8 <= ref9 ? t <= ref9 : t >= ref9; j = ref8 <= ref9 ? ++t : --t) {\n        if (j >= password.length) {\n          break;\n        }\n\n        token = password.slice(i, +j + 1 || 9e9);\n        rx_match = maybe_date_with_separator.exec(token);\n\n        if (rx_match == null) {\n          continue;\n        }\n\n        dmy = this.map_ints_to_dmy([parseInt(rx_match[1]), parseInt(rx_match[3]), parseInt(rx_match[4])]);\n\n        if (dmy == null) {\n          continue;\n        }\n\n        matches.push({\n          pattern: 'date',\n          token: token,\n          i: i,\n          j: j,\n          separator: rx_match[2],\n          year: dmy.year,\n          month: dmy.month,\n          day: dmy.day\n        });\n      }\n    }\n\n    return this.sorted(matches.filter(function (match) {\n      var is_submatch, len3, other_match, u;\n      is_submatch = false;\n\n      for (u = 0, len3 = matches.length; u < len3; u++) {\n        other_match = matches[u];\n\n        if (match === other_match) {\n          continue;\n        }\n\n        if (other_match.i <= match.i && other_match.j >= match.j) {\n          is_submatch = true;\n          break;\n        }\n      }\n\n      return !is_submatch;\n    }));\n  },\n  map_ints_to_dmy: function (ints) {\n    var dm, int, len1, len2, len3, o, over_12, over_31, p, possible_year_splits, q, ref, ref1, rest, under_1, y;\n\n    if (ints[1] > 31 || ints[1] <= 0) {\n      return;\n    }\n\n    over_12 = 0;\n    over_31 = 0;\n    under_1 = 0;\n\n    for (o = 0, len1 = ints.length; o < len1; o++) {\n      int = ints[o];\n\n      if (99 < int && int < DATE_MIN_YEAR || int > DATE_MAX_YEAR) {\n        return;\n      }\n\n      if (int > 31) {\n        over_31 += 1;\n      }\n\n      if (int > 12) {\n        over_12 += 1;\n      }\n\n      if (int <= 0) {\n        under_1 += 1;\n      }\n    }\n\n    if (over_31 >= 2 || over_12 === 3 || under_1 >= 2) {\n      return;\n    }\n\n    possible_year_splits = [[ints[2], ints.slice(0, 2)], [ints[0], ints.slice(1, 3)]];\n\n    for (p = 0, len2 = possible_year_splits.length; p < len2; p++) {\n      ref = possible_year_splits[p], y = ref[0], rest = ref[1];\n\n      if (DATE_MIN_YEAR <= y && y <= DATE_MAX_YEAR) {\n        dm = this.map_ints_to_dm(rest);\n\n        if (dm != null) {\n          return {\n            year: y,\n            month: dm.month,\n            day: dm.day\n          };\n        } else {\n          return;\n        }\n      }\n    }\n\n    for (q = 0, len3 = possible_year_splits.length; q < len3; q++) {\n      ref1 = possible_year_splits[q], y = ref1[0], rest = ref1[1];\n      dm = this.map_ints_to_dm(rest);\n\n      if (dm != null) {\n        y = this.two_to_four_digit_year(y);\n        return {\n          year: y,\n          month: dm.month,\n          day: dm.day\n        };\n      }\n    }\n  },\n  map_ints_to_dm: function (ints) {\n    var d, len1, m, o, ref, ref1;\n    ref = [ints, ints.slice().reverse()];\n\n    for (o = 0, len1 = ref.length; o < len1; o++) {\n      ref1 = ref[o], d = ref1[0], m = ref1[1];\n\n      if (1 <= d && d <= 31 && 1 <= m && m <= 12) {\n        return {\n          day: d,\n          month: m\n        };\n      }\n    }\n  },\n  two_to_four_digit_year: function (year) {\n    if (year > 99) {\n      return year;\n    } else if (year > 50) {\n      return year + 1900;\n    } else {\n      return year + 2000;\n    }\n  }\n};\nmodule.exports = matching;","map":null,"metadata":{},"sourceType":"script"}