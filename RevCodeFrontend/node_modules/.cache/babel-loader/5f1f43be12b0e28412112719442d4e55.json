{"ast":null,"code":"var _jsxFileName = \"/Users/finality5/Desktop/speechreg/src/Speech.js\";\nimport React, { Component } from \"react\";\nimport { Button, Message } from \"semantic-ui-react\";\nwindow.SpeechRecognition = window.webkitSpeechRecognition || window.SpeechRecognition;\nlet finalTranscript = \"\";\nlet recognition = new window.SpeechRecognition();\nrecognition.interimResults = true;\nrecognition.maxAlternatives = 10;\nrecognition.continuous = true;\nexport class Speech extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      btnStyle: true,\n      btnText: true,\n      res: \"\"\n    };\n\n    this.btnPressed = () => {\n      this.setState({\n        btnStyle: !this.state.btnStyle\n      });\n      this.setState({\n        btnText: !this.state.btnText\n      });\n      clearInterval(Interval);\n      Interval = setInterval(startTimer, 10);\n      timer = true;\n\n      if (window.hasOwnProperty(\"webkitSpeechRecognition\")) {\n        recognition.continuous = true; //recognition.interimResults = false;\n\n        recognition.lang = \"en-US\";\n        recognition.lang = \"th-TH\";\n        recognition.start();\n\n        recognition.onresult = function (e) {\n          // console.log(e)\n          speech = speech + e.results[0][0].transcript;\n          console.log(speech);\n        };\n\n        recognition.onend = function (e) {\n          console.log(\"onend\");\n          console.log(e);\n\n          if (forcestop) {\n            forcestop = false;\n            this.setState({\n              res: speech\n            });\n          } else {\n            recognition.start();\n          }\n        };\n\n        recognition.onerror = function (e) {\n          console.log(\"on error\");\n          console.log(e);\n        };\n      } else {\n        alert(\"Must upgrade browser.\");\n      }\n    };\n  }\n\n  render() {\n    console.log(this.state.res);\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }, React.createElement(Button, {\n      content: this.state.btnText ? \"Start Record\" : \"Recording\",\n      icon: \"microphone\",\n      color: this.state.btnStyle ? \"teal\" : \"red\",\n      labelPosition: \"left\",\n      onClick: this.btnPressed,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }), React.createElement(Message, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }, React.createElement(Message.Header, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }, \"Result\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }, this.state.res)));\n  }\n\n}\nexport default Speech;","map":{"version":3,"sources":["/Users/finality5/Desktop/speechreg/src/Speech.js"],"names":["React","Component","Button","Message","window","SpeechRecognition","webkitSpeechRecognition","finalTranscript","recognition","interimResults","maxAlternatives","continuous","Speech","state","btnStyle","btnText","res","btnPressed","setState","clearInterval","Interval","setInterval","startTimer","timer","hasOwnProperty","lang","start","onresult","e","speech","results","transcript","console","log","onend","forcestop","onerror","alert","render"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { Button, Message } from \"semantic-ui-react\";\n\nwindow.SpeechRecognition =\n  window.webkitSpeechRecognition || window.SpeechRecognition;\nlet finalTranscript = \"\";\nlet recognition = new window.SpeechRecognition();\nrecognition.interimResults = true;\nrecognition.maxAlternatives = 10;\nrecognition.continuous = true;\nexport class Speech extends Component {\n  state = { btnStyle: true, btnText: true, res: \"\" };\n  btnPressed = () => {\n    this.setState({ btnStyle: !this.state.btnStyle });\n    this.setState({ btnText: !this.state.btnText });\n    clearInterval(Interval);\n    Interval = setInterval(startTimer, 10);\n    timer = true;\n    if (window.hasOwnProperty(\"webkitSpeechRecognition\")) {\n      recognition.continuous = true;\n      //recognition.interimResults = false;\n\n      recognition.lang = \"en-US\";\n      recognition.lang = \"th-TH\";\n      recognition.start();\n\n      recognition.onresult = function(e) {\n        // console.log(e)\n        speech = speech + e.results[0][0].transcript;\n        console.log(speech);\n      };\n\n      recognition.onend = function(e) {\n        console.log(\"onend\");\n        console.log(e);\n        if (forcestop) {\n          forcestop = false;\n          this.setState({ res: speech });\n        } else {\n          recognition.start();\n        }\n      };\n\n      recognition.onerror = function(e) {\n        console.log(\"on error\");\n        console.log(e);\n      };\n    } else {\n      alert(\"Must upgrade browser.\");\n    }\n  };\n  render() {\n    console.log(this.state.res);\n    return (\n      <div>\n        <Button\n          content={this.state.btnText ? \"Start Record\" : \"Recording\"}\n          icon=\"microphone\"\n          color={this.state.btnStyle ? \"teal\" : \"red\"}\n          labelPosition=\"left\"\n          onClick={this.btnPressed}\n        />\n        <Message>\n          <Message.Header>Result</Message.Header>\n          <p>{this.state.res}</p>\n        </Message>\n      </div>\n    );\n  }\n}\n\nexport default Speech;\n"]},"metadata":{},"sourceType":"module"}